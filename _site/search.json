[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Vincenzo Palazeti",
    "section": "",
    "text": "Hello! My name is Vincenzo Palazeti. Most people call me Vinnie.\nI am a Data Scientist at Vevo."
  },
  {
    "objectID": "posts/sql/index.html",
    "href": "posts/sql/index.html",
    "title": "SQL",
    "section": "",
    "text": "In Redshift, the random function is run every time the function is called.\nTherefore, if you need to use the same random number multiple times\n\nRandomly sample the history of a product, within a store, between two dates.\n..."
  },
  {
    "objectID": "posts/sql/index.html#random",
    "href": "posts/sql/index.html#random",
    "title": "SQL",
    "section": "",
    "text": "In Redshift, the random function is run every time the function is called.\nTherefore, if you need to use the same random number multiple times\n\nRandomly sample the history of a product, within a store, between two dates.\n..."
  },
  {
    "objectID": "posts/pandas/index.html",
    "href": "posts/pandas/index.html",
    "title": "Pandas",
    "section": "",
    "text": "Grab all of the month names\nmonths = pd.date_range('2020-01-01','2020-12-31',freq='MS').map(lambda x: x.month_name())"
  },
  {
    "objectID": "posts/zsh/index.html",
    "href": "posts/zsh/index.html",
    "title": "zsh",
    "section": "",
    "text": "Look up past commands\nhistory | grep docker"
  },
  {
    "objectID": "posts/biz_ops/index.html",
    "href": "posts/biz_ops/index.html",
    "title": "Business Ops.",
    "section": "",
    "text": "MMM"
  },
  {
    "objectID": "posts/docker/index.html",
    "href": "posts/docker/index.html",
    "title": "Docker",
    "section": "",
    "text": "Two stage Dockerfile. Runner image is slim with only virtual environment.\nFROM ubuntu:20.04 AS builder-image\n\n# avoid stuck build due to user prompt\nARG DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y python3.9 python3.9-dev python3.9-venv python3-pip python3-wheel build-essential && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\n# create and activate virtual environment\n# using final folder name to avoid path issues with packages\nRUN python3.9 -m venv /home/myuser/venv\nENV PATH=\"/home/myuser/venv/bin:$PATH\"\n\n# install requirements\nCOPY app/requirements.txt .\nRUN pip3 install --no-cache-dir wheel\nRUN pip3 install --no-cache-dir -r requirements.txt\n\nFROM ubuntu:20.04 AS runner-image\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y python3.9 python3-venv && \\\n    apt-get clean && \\\n    rm -rf /var/lib/apt/lists/*\n\nRUN useradd --create-home myuser\nCOPY --from=builder-image /home/myuser/venv /home/myuser/venv\n\nUSER myuser\nRUN mkdir /home/myuser/code\nWORKDIR /home/myuser/code\nCOPY app .\n\n# make sure all messages always reach console\nENV PYTHONUNBUFFERED=1\n\n# activate virtual environment\nENV VIRTUAL_ENV=/home/myuser/venv\nENV PATH=\"/home/myuser/venv/bin:$PATH\"\nI’ve been told installing python manually is not worth the effort & nudged to use the official docker python images.\nThis is good advice, because I have struggled with C package installs (specifically for LGBM).\n\nCreate a container & attach a volume to the image. This command opens the container in interactive mode, mounts the /app directory as a volumne, and links the port 8080.\nThis is useful because changes to application, or whatever you are working on, are reflected inside of the docker container.\nI have been using this with streamlit, but I believe it should work with jupyter. Linking to jupyter through a docker container is a pain, so maybe not. I’ll have to check.\ndocker run -it --rm -v $(pwd)/app:/home/myuser/code -p 8080:8080 img_name\n\nIf your environment requires variables you can pass them through with --env-file\ndocker run --env-file .env-local \nWith the format:\nDS_BUCKET=XXXX\nAWS_ACCESS_KEY_ID_DEV=XXXX\nAWS_SECRET_ACCESS_KEY_DEV=XXXX"
  },
  {
    "objectID": "posts/glm/index.html",
    "href": "posts/glm/index.html",
    "title": "GLM",
    "section": "",
    "text": "The conditional average treatment effect\n\\[\n\\text{CATE} = \\mathbb{E}[\\text{Pr}(\\text{Y}_i = 1 \\ |\\ \\text{X}_i = 1) \\ - \\ \\text{Pr}(\\text{Y}_i = 1 \\ |\\ \\text{X}_i = 0) \\ | \\ \\text{Z}_i = z]\n\\]\n\nlibrary(data.table)\n\n# covariates\nX &lt;- rbinom(1000,1,0.5)\nZ &lt;- rbinom(1000,1,0.4)\n# data generating process\nmu &lt;- -0.5 + 0.5*X + X*(-1.0*Z) + rnorm(1000,0,0.1)\n# logistic function\ntheta &lt;- exp(mu) / (1 + exp(mu))\n# outcome\nY &lt;- rbinom(1000, 1, theta)\ndata &lt;- data.table(Y=Y, X=X, Z=Z)\n\n# model\nlogit &lt;- glm(Y ~ X + X*Z, data=data, family = binomial(link=\"logit\"))\n\n# data with both values of X\nY1 &lt;- data.table(Y = data$Y, X = 1, X = data$Z)\nY0 &lt;- data.table(Y = data$Y, X = 0, X = data$Z)\n\n# expected value at each level of X# \nEY1 &lt;- predict(logit, newdata=Y1, type='response')\nEY0 &lt;- predict(logit, newdata=Y0, type='response')\n\n# create columns\ndata[, ':=' ('EY1' = EY1, 'EY0' = EY0)]\n\n# calculate estimand at different covariate values\ndata[, .('CATE' = mean(EY1 - EY0)), by=Z]\n\n   Z       CATE\n1: 0  0.1030976\n2: 1 -0.2149227\n\n\n\nlibrary(marginaleffects)\n\nmod &lt;- glm(vs ~ hp * am, data = mtcars, family=binomial)\n\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\ncomparisons(\n    mod, \n    variables='am', \n    newdata=datagrid(hp=c(100,120))\n)\n\n\n Term Contrast Estimate Std. Error     z Pr(&gt;|z|)   S  2.5 %  97.5 %  hp\n   am    1 - 0   -0.391      0.189 -2.07   0.0386 4.7 -0.761 -0.0205 100\n   am    1 - 0   -0.707      0.253 -2.79   0.0052 7.6 -1.203 -0.2113 120\n\nColumns: rowid, term, contrast, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, predicted, predicted_hi, predicted_lo, vs, am, hp \n\ncomparisons(\n    mod, \n    variables='am', \n    newdata=datagrid(hp=c(100,120)),\n    hypothesis='b1 = b2'\n)\n\n\n  Term Estimate Std. Error    z Pr(&gt;|z|)   S   2.5 % 97.5 %\n b1=b2    0.316      0.201 1.58    0.115 3.1 -0.0773   0.71\n\nColumns: term, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high"
  },
  {
    "objectID": "posts/glm/index.html#cate",
    "href": "posts/glm/index.html#cate",
    "title": "GLM",
    "section": "",
    "text": "The conditional average treatment effect\n\\[\n\\text{CATE} = \\mathbb{E}[\\text{Pr}(\\text{Y}_i = 1 \\ |\\ \\text{X}_i = 1) \\ - \\ \\text{Pr}(\\text{Y}_i = 1 \\ |\\ \\text{X}_i = 0) \\ | \\ \\text{Z}_i = z]\n\\]\n\nlibrary(data.table)\n\n# covariates\nX &lt;- rbinom(1000,1,0.5)\nZ &lt;- rbinom(1000,1,0.4)\n# data generating process\nmu &lt;- -0.5 + 0.5*X + X*(-1.0*Z) + rnorm(1000,0,0.1)\n# logistic function\ntheta &lt;- exp(mu) / (1 + exp(mu))\n# outcome\nY &lt;- rbinom(1000, 1, theta)\ndata &lt;- data.table(Y=Y, X=X, Z=Z)\n\n# model\nlogit &lt;- glm(Y ~ X + X*Z, data=data, family = binomial(link=\"logit\"))\n\n# data with both values of X\nY1 &lt;- data.table(Y = data$Y, X = 1, X = data$Z)\nY0 &lt;- data.table(Y = data$Y, X = 0, X = data$Z)\n\n# expected value at each level of X# \nEY1 &lt;- predict(logit, newdata=Y1, type='response')\nEY0 &lt;- predict(logit, newdata=Y0, type='response')\n\n# create columns\ndata[, ':=' ('EY1' = EY1, 'EY0' = EY0)]\n\n# calculate estimand at different covariate values\ndata[, .('CATE' = mean(EY1 - EY0)), by=Z]\n\n   Z       CATE\n1: 0  0.1030976\n2: 1 -0.2149227\n\n\n\nlibrary(marginaleffects)\n\nmod &lt;- glm(vs ~ hp * am, data = mtcars, family=binomial)\n\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\ncomparisons(\n    mod, \n    variables='am', \n    newdata=datagrid(hp=c(100,120))\n)\n\n\n Term Contrast Estimate Std. Error     z Pr(&gt;|z|)   S  2.5 %  97.5 %  hp\n   am    1 - 0   -0.391      0.189 -2.07   0.0386 4.7 -0.761 -0.0205 100\n   am    1 - 0   -0.707      0.253 -2.79   0.0052 7.6 -1.203 -0.2113 120\n\nColumns: rowid, term, contrast, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high, predicted, predicted_hi, predicted_lo, vs, am, hp \n\ncomparisons(\n    mod, \n    variables='am', \n    newdata=datagrid(hp=c(100,120)),\n    hypothesis='b1 = b2'\n)\n\n\n  Term Estimate Std. Error    z Pr(&gt;|z|)   S   2.5 % 97.5 %\n b1=b2    0.316      0.201 1.58    0.115 3.1 -0.0773   0.71\n\nColumns: term, estimate, std.error, statistic, p.value, s.value, conf.low, conf.high"
  },
  {
    "objectID": "posts/ols/index.html",
    "href": "posts/ols/index.html",
    "title": "OLS",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Site",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\n \n\n\nPandas\n\n\n \n\n\n\n\nDec 16, 2023\n\n\nLLM\n\n\n \n\n\n\n\nDec 16, 2023\n\n\nGLM\n\n\n \n\n\n\n\nDec 2, 2023\n\n\nDocker\n\n\n \n\n\n\n\nDec 2, 2023\n\n\nAirflow\n\n\n \n\n\n\n\nDec 2, 2023\n\n\nBusiness Ops.\n\n\n \n\n\n\n\nDec 2, 2023\n\n\nMongoDB\n\n\n \n\n\n\n\nDec 2, 2023\n\n\nSQL\n\n\n \n\n\n\n\nNov 29, 2023\n\n\nOLS\n\n\n \n\n\n\n\nFeb 1, 2023\n\n\nzsh\n\n\n \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "Vincenzo Palazeti",
    "section": "Experience",
    "text": "Experience\n\n\n Data Scientist, 2023-Present\n\n\nVevo\n\n\n Data Scientist, 2022-2023\n\n\nAlphaPeak\n\n\n Data Scientist, 2020-2022\n\n\nSports Betting Innovative Analytics\n\n\n Statistician, 2019-2020\n\n\nCenter for Criminal Justice Research"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Vincenzo Palazeti",
    "section": "Education",
    "text": "Education\n\n\n MS in Applied Statistics, 2020\n\n\nUniversity of Loyola Chicago\n\n\n BS in Professional Selling, 2017\n\n\nBall State University"
  }
]