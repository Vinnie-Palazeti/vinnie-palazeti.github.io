---
title: Ngboost
date: '2024-01-18'
categories: [code, survival]
engine: jupyter
---

A few years ago the Standford ML Group released [NGBoost](https://stanfordmlgroup.github.io/projects/ngboost/).

They use the "Natural Gradient", which to be honest I don't yet fully understand.

As they put it:
>Our key innovation is in employing the natural gradient to perform gradient boosting by casting it as a problem of determining the parameters of a probability distribution.

With this learned distribution, you can get the mean & stdev at a given value. Also, it allows you to model the joint distribution of two variables.

Here, I am using the veterans dataset. `ngb.pred_dist` returns a scipy.stats object, so it has methods of like .cdf()

```{python}
import pandas as pd
import numpy as np
from ngboost import NGBSurvival
from ngboost.distns import LogNormal
import plotly.express as px

d = pd.read_csv('veteran.csv')

X = d[['trt']].values
T = d[['time']].values
E = d[['status']].values

ngb = NGBSurvival(
    Dist=LogNormal,
    n_estimators=100).fit(X, T, E)

preds = ngb.predict(X)
dist = ngb.pred_dist([[1],[2]]) # treatment 1 & 2

est_times = (
    pd.DataFrame(
        [np.concatenate([[t], dist.cdf(t)]) for t in range(0,250,2)],
        columns=['time','trt1','trt2'])
)

fig = px.line(est_times, x='time', y=['trt1','trt2'])
fig.show()
```